#include "mthd_test_data.h"

namespace mthd_test {


extern std::vector<bytes_range_t> valid_set_a {
	// Varying values for length, but always within input range
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0x00,0x03,0x00,0xF0},14},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0x00,0x03,0x00,0xF0},100},
	// length == 15, range == 25 (==15+8)
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x0F,0x00,0x01,0x00,0x03,0x00,0xF0},23},
	// Varying format, ntrks.  ntrks == 0 is valid for all formats
	// ntrks == 0
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0x00,0x00,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x02,0x00,0x00,0x00,0xF0},100},
	// ntrks == 1
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x01,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0x00,0x01,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x02,0x00,0x01,0x00,0xF0},100},
	// ntrks == 2, except for format == 0
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0x00,0x02,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x02,0x00,0x02,0x00,0xF0},100},
	// ntrks == max
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0xFF,0xFF,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x02,0xFF,0xFF,0x00,0xF0},100},
	// Weird values for format
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x09,0x00,0x00,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x09,0x00,0x03,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0xFF,0xFF,0x00,0x00,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0xFF,0xFF,0x00,0x03,0x00,0xF0},100}
};

extern std::vector<bytes_range_t> invalid_set_a {
	// range < 14
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0x00,0x03,0x00,0xF0},13},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0x00,0x03,0x00,0xF0},0},
	// Range < 14, but consistent w/ length field
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x05,0x00,0x01,0x00,0x03,0x00,0xF0},13},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x03,0x00,0xF0},9},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x03,0x00,0xF0},8},
	// length field is < 6; range is ok
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x05,0x00,0x01,0x00,0x03,0x00,0xF0},14},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x04,0x00,0x01,0x00,0x03,0x00,0xF0},14},

	// format==0 but ntrks > 1
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x02,0x00,0xF0},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x03,0x00,0xF0},100},

	// Invalid SMPTE
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x01,0x00,0x02,0xFF,0xFF},100},
	{{0x4D,0x54,0x68,0x64,0x00,0x00,0x00,0x06,0x00,0x02,0x00,0x02,0x80,0x00},100}
};



//struct mthd_testset_a_t {
//	std::array<unsigned char,14> data;
//	int ans_length;
//	int ans_format;
//	int ans_ntrks;
//	int ans_division;
//};

std::vector<mthd_testset_a_t> valid_unusual_a {
	// 253 trks!
	{{0x4Du,0x54u,0x68u,0x64u,0x00u,0x00u,0x00u,0x06u,0x00u,0x01u,0x00u,0xFD,
	0x01u,0x80u},
	6,1,253,384},
	// 130 trks!  480 tks/qnt
	{{0x4Du,0x54u,0x68u,0x64u,0x00u,0x00u,0x00u,0x06u,0x00u,0x01u,0x00u,0x82u,
	0x01u,0xE0u},
	6,1,130,480},
	// 74 trks!  480 tks/qnt
	{{0x4Du,0x54u,0x68u,0x64u,0x00u,0x00u,0x00u,0x06u,0x00u,0x01u,0x00u,0x4Au,
	0x01u,0xE0u},
	6,1,74,480}
};

//struct byfieldvalue_valid_t {
//	int format;
//	int ntrks;
//	int division;
//};
std::vector<byfieldvalue_valid_t> byfieldvalue_valid {
	// Varying format; ntrks == 0 is valid for all formats
	{0,0,240},
	{1,0,240},
	{2,0,240},
	// ntrks == 1
	{0,1,240},
	{1,1,240},
	{2,1,240},
	// ntrks == 2, except for format == 0
	{1,2,240},
	{2,2,240},
	// ntrks == max
	{1,65535,240},
	{2,65535,240},
	// Weird values for format
	{9,0,240},
	{9,3,240},
	{65535,0,240},
	{65535,3,240},
	// Varying format, tpq == minimum allowed, maximum allowed
	{0,0,1},
	{1,0,1},
	{2,0,1},
	{0,0,32767},
	{1,0,32767},
	{2,0,32767}
};

//struct byfieldvalue_invalid_t {
//	int format;
//	int ntrks;
//	int division;
//	...
//};
extern std::vector<byfieldvalue_invalid_t> byfieldvalue_invalid {
	// format==0 but ntrks > 1
	{0,2,240,  1,2,240},
	{0,3,240,  1,3,240}
};



};  // namespace mthd_test
